{"author":"Jonathan Brown <jbrown@bluedroplet.com>","title":"BlobStoreRegistry","fileName":"contracts/blobstore_registry.sol","name":"BlobStoreRegistry","abi":[{"constant":false,"inputs":[{"name":"contractId","type":"bytes12"}],"name":"register","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"contractId","type":"bytes12"}],"name":"getBlobStore","outputs":[{"name":"blobStore","type":"address"}],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"contractId","type":"bytes12"},{"indexed":true,"name":"contractAddress","type":"address"}],"name":"Register","type":"event"}],"bin":"60606040526102b8806100126000396000f360606040526000357c010000000000000000000000000000000000000000000000000000000090048063c5f310c014610047578063f42aa2871461006457610042565b610002565b346100025761006260048080359060200190919050506100ab565b005b346100025761007f60048080359060200190919050506101ea565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b806000600060005060008373ffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561011e57610002565b33600060005060008473ffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c010000000000000000000000009081020402179055503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff19167f144c06c3c34d241c97c92ab9a1b6a497cb5569cc6868c1858a44966fcea0261f60405180905060405180910390a35b5b5050565b6000816000600060005060008373ffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561025e57610002565b600060005060008473ffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915081505b5b5091905056","opcodes":"PUSH1 0x60 PUSH1 0x40 MSTORE PUSH2 0x2B8 DUP1 PUSH2 0x12 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0xC5F310C0 EQ PUSH2 0x47 JUMPI DUP1 PUSH4 0xF42AA287 EQ PUSH2 0x64 JUMPI PUSH2 0x42 JUMP JUMPDEST PUSH2 0x2 JUMP JUMPDEST CALLVALUE PUSH2 0x2 JUMPI PUSH2 0x62 PUSH1 0x4 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 0xAB JUMP JUMPDEST STOP JUMPDEST CALLVALUE PUSH2 0x2 JUMPI PUSH2 0x7F PUSH1 0x4 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 0x1EA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP1 PUSH1 0x0 PUSH1 0x0 PUSH1 0x0 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SHA3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x11E JUMPI PUSH2 0x2 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH1 0x0 POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SHA3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH13 0x1000000000000000000000000 SWAP1 DUP2 MUL DIV MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH32 0x144C06C3C34D241C97C92AB9A1B6A497CB5569CC6868C1858A44966FCEA0261F PUSH1 0x40 MLOAD DUP1 SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 PUSH1 0x0 PUSH1 0x0 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SHA3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x25E JUMPI PUSH2 0x2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SHA3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP DUP2 POP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP ","source":"pragma solidity ^0.4.4;\n\nimport \"./abstract_blobstore.sol\";\n\n\n/**\n * @title BlobStoreRegistry\n * @author Jonathan Brown <jbrown@bluedroplet.com>\n */\ncontract BlobStoreRegistry {\n\n    /**\n     * @dev Mapping of contract id to contract addresses.\n     */\n    mapping (bytes12 => address) contractAddresses;\n\n    /**\n     * @dev An AbstractBlobStore contract has been registered.\n     * @param contractId Id of the contract.\n     * @param contractAddress Address of the contract.\n     */\n    event Register(bytes12 indexed contractId, address indexed contractAddress);\n\n    /**\n     * @dev Throw if contract is registered.\n     * @param contractId Id of the contract.\n     */\n    modifier isNotRegistered(bytes12 contractId) {\n        if (contractAddresses[contractId] != 0) {\n            throw;\n        }\n        _;\n    }\n\n    /**\n     * @dev Throw if contract is not registered.\n     * @param contractId Id of the contract.\n     */\n    modifier isRegistered(bytes12 contractId) {\n        if (contractAddresses[contractId] == 0) {\n            throw;\n        }\n        _;\n    }\n\n    /**\n     * @dev Register the calling BlobStore contract.\n     * @param contractId Id of the BlobStore contract.\n     */\n    function register(bytes12 contractId) external isNotRegistered(contractId) {\n        // Record the calling contract address.\n        contractAddresses[contractId] = msg.sender;\n        // Log the registration.\n        Register(contractId, msg.sender);\n    }\n\n    /**\n     * @dev Get an AbstractBlobStore contract.\n     * @param contractId Id of the contract.\n     * @return blobStore The AbstractBlobStore contract.\n     */\n    function getBlobStore(bytes12 contractId) external constant isRegistered(contractId) returns (AbstractBlobStore blobStore) {\n        blobStore = AbstractBlobStore(contractAddresses[contractId]);\n    }\n\n}\n","abiDocs":[{"constant":false,"inputs":[{"name":"contractId","type":"bytes12","description":"Id of the BlobStore contract."}],"name":"register","outputs":[],"payable":false,"type":"function","details":"Register the calling BlobStore contract.","signature":"register(bytes12)","signatureHash":"c5f310c0"},{"constant":true,"inputs":[{"name":"contractId","type":"bytes12","description":"Id of the contract."}],"name":"getBlobStore","outputs":[{"name":"blobStore","type":"address"}],"payable":false,"type":"function","details":"Get an AbstractBlobStore contract.","return":"blobStore The AbstractBlobStore contract.","signature":"getBlobStore(bytes12)","signatureHash":"f42aa287"},{"anonymous":false,"inputs":[{"indexed":true,"name":"contractId","type":"bytes12"},{"indexed":true,"name":"contractAddress","type":"address"}],"name":"Register","type":"event","signature":"Register(bytes12,address)","signatureHash":"144c06c3"}]}
